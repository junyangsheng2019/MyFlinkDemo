
0.创建索引
PUT localhost:9200/my_index
1.插入mappings信息
PUT localhost:9200/my_index/_mappings
{
    "properties": {
        "title": {
            "type": "text"
        },
        "body": {
            "type": "text"
        },
        "tags": {
            "type": "text"
        },
        "comments": {
            "type": "nested",
            "properties": {
                "name": {
                    "type": "text"
                },
                "comment": {
                    "type": "text"
                },
                "age": {
                    "type": "short"
                },
                "stars": {
                    "type": "short"
                },
                "date": {
                    "type": "date"
                }
            }
        }
    }
}
2.插入测试数据
localhost:9200/my_index/_doc/1
{
  "title": "Nest eggs",
  "body":  "Making your money work...",
  "tags":  [ "cash", "shares" ],
  "comments": [
    {
      "name":    "John Smith",
      "comment": "Great article",
      "age":     28,
      "stars":   4,
      "date":    "2014-09-01"
    },
    {
      "name":    "Alice White",
      "comment": "More like this please",
      "age":     31,
      "stars":   5,
      "date":    "2014-10-22"
    }
  ]
}
数据2
{
  "title": "Nest bird",
  "body":  "Making your money work...",
  "tags":  [ "cash", "shares" ],
  "comments": [
    {
      "name":    "Jack Ma",
      "comment": "Great article",
      "age":     18,
      "stars":   1,
      "date":    "2014-09-01"
    },
    {
      "name":    "Tom Green",
      "comment": "More like this please",
      "age":     44,
      "stars":   4,
      "date":    "2014-10-22"
    }
  ]
}
{
  "title": "Investment secrets",
  "body":  "What they don't tell you ...",
  "tags":  [ "shares", "equities" ],
  "comments": [
    {
      "name":    "Mary Brown",
      "comment": "Lies, lies, lies",
      "age":     42,
      "stars":   1,
      "date":    "2014-10-18"
    },
    {
      "name":    "John Smith",
      "comment": "You're making it up!",
      "age":     28,
      "stars":   2,
      "date":    "2014-10-16"
    }
  ]
}
3.nested查询
计算title是eggs,且年龄是28，名字是john的集合
Get localhost:9200/my_index/_doc/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "title": "eggs"
          }
        },
        {
          "nested": {
            "path": "comments",
            "query": {
              "bool": {
                "must": [
                  {
                    "match": {
                      "comments.name": "john"
                    }
                  },
                  {
                    "match": {
                      "comments.age": 28
                    }
                  }
                ]
              }
            }
          }
        }
      ]
}}}

返回：
{
    "hits": {
        "total": {
            "value": 1,
            "relation": "eq"
        },
        "max_score": 2.2039728,
        "hits": [
            {
                "_index": "my_index",
                "_type": "_doc",
                "_id": "1",
                "_score": 2.2039728,
                "_source": {
                    "title": "Nest eggs",
                    "body": "Making your money work...",
                    "tags": [
                        "cash",
                        "shares"
                    ],
                    "comments": [
                        {
                            "name": "John Smith",
                            "comment": "Great article",
                            "age": 28,
                            "stars": 4,
                            "date": "2014-09-01"
                        },
                        {
                            "name": "Alice White",
                            "comment": "More like this please",
                            "age": 31,
                            "stars": 5,
                            "date": "2014-10-22"
                        }
                    ]
                }
            }
        ]
    }
}
nested,会返回满足该查询的嵌套集合内的所有元素，如果查询name=john,age=27,则没有返回
4.聚合排序
假如我们想要查询在10月份收到评论的博客文章，并且按照 stars 数的最小值来由小到大排序，那么查询语句如下：
因为嵌套nested不支持 filter


5.localhost:9200/my_index/_doc/_search
计算每月的星星平均数
{
    "size" : 0,
    "aggs": {
      "comments": {
        "nested": {
          "path": "comments"
        },
        "aggs": {
          "by_month": {
            "date_histogram": {
              "field":    "comments.date",
              "interval": "month",
              "format":   "yyyy-MM"
            },
            "aggs": {
              "avg_stars": {
                "avg": {
                  "field": "comments.stars"
                }
              }
            }
          }
        }
      }
    }
  }
  返回结果：
  {
      "aggregations": {
          "comments": {
              "doc_count": 6,
              "by_month": {
                  "buckets": [
                      {
                          "key_as_string": "2014-09",
                          "key": 1409529600000,
                          "doc_count": 2,
                          "avg_stars": {
                              "value": 2.5
                          }
                      },
                      {
                          "key_as_string": "2014-10",
                          "key": 1412121600000,
                          "doc_count": 4,
                          "avg_stars": {
                              "value": 3.0
                          }
                      }
                  ]
              }
          }
      }
  }

  products
 聚合是在嵌套文档层面进行的：nested 聚合允许我们对嵌套对象里的字段进行聚合操作。
 嵌套products:
 1.创建索引PUT /products
 2.建立mappings
 PUT localhost:9200/products/_mappings
 {
     "properties": {
       "resellers": {
         "type": "nested",
         "properties": {
           "reseller": { "type": "text" },
           "price": { "type": "double" }
         }
       }
     }
 }

 需要为字段添加聚合属性，filedData
 PUT localhost:9200/products/_mapping

 {
   "properties": {
     "color": {
       "type":     "text",
       "fielddata": true
     }
   }
 }
resellers is an array that holds nested documents.有字段：name,resellers:[reseller,price]
 3.插入测试数据
 PUT localhost:9200/products/_doc/1
{
  "name": "LED TV",
  "resellers": [
    {
      "reseller": "companyA",
      "price": 350
    },
    {
      "reseller": "companyB",
      "price": 500
    }
  ]
}

4.查询：localhost:9200/products/_search
返回：摘抄部分
 {
     "name": "LED TV",
     "resellers": [
         {
             "reseller": "companyA",
             "price": 350
         },
         {
             "reseller": "companyB",
             "price": 500
         }
     ]
 }

 name字段由keyword改为text,则输入全名匹配不上。因为keyword不会分词，所以查询led tv可以匹配到。而text会分词，输入led tv 则匹配不到
 5.return the minPrice of  product can be purchased
 GET localhost:9200/products/_search
 {
   "query": {
     "match": { "name": "led tv" }
   },
   "aggs": {
     "resellers": {
       "nested": {
         "path": "resellers"
       },
       "aggs": {
         "min_price": { "min": { "field": "resellers.price" } }
       }
     }
   }
 }
 返回：
 "aggregations": {
         "resellers": {
             "doc_count": 2,
             "min_price": {
                 "value": 350.0
             }
         }
     }
1.新建索引 products
2.新建mappings name 由于需要聚合，所以需要修改成text类型。
     {
                 "properties": {
                     "name": {
                         "type": "keyword",
                         "fields": {
                             "keyword": {
                                 "type": "keyword",
                                 "ignore_above": 256
                             }
                         }
                     },
                     "resellers": {
                         "type": "nested",
                         "properties": {
                             "price": {
                                 "type": "double"
                             },
                             "reseller": {
                                 "type": "text"
                             }
                         }
                     }
                 }

     }
3.插入数据
 {
     "name": "LED TV",
     "resellers": [
         {
             "reseller": "companyA",
             "price": 350
         },
         {
             "reseller": "companyB",
             "price": 500
         }
     ]
 }

4.条件查询,先聚合求sum,
先外层指定匹配的name,再进入嵌套对象里，聚合查询sum，根据查询结果再过滤掉sum>840
查询name是LED TV,且分销商购买金额总价大于840
{
  "query": {
    "match": {
      "name": "LED TV"
    }
  },
  "aggs": {
    "name_aggs": {
      "terms": {
        "field": "name"
      },
      "aggs": {
        "subA": {
          "nested": {
            "path": "resellers"
          },
          "aggs": {
            "sum_price": {
              "sum": {
                "field": "resellers.price"
              }
            }
          }
        },
        "subA_selector": {
          "bucket_selector": {
            "buckets_path": {
              "sumPrice": "subA.sum_price "
            },
            "script": "params.sumPrice > 840"
          }
        }
      }
    }
  },
  "size": 0
}
subA_selector 从subA.sum_price，聚合后的sum(price)进行过滤。
返回结果：
{
    "aggregations": {
        "name_aggs": {
            "doc_count_error_upper_bound": 0,
            "sum_other_doc_count": 0,
            "buckets": [
                {
                    "key": "LED TV",
                    "doc_count": 1,
                    "subA": {
                        "doc_count": 2,
                        "sum_price": {
                            "value": 850.0
                        }
                    }
                }
            ]
        }
    }
}

//插入测试
POST localhost:9200/label_usertrait/_doc
{

"user_id": "91597005",
"user_sex": "user_sex_0d98c747",
"belong_city_name": "呼和浩特市",
"belong_city_line": "belong_city_line_4e115f11",
"school_name": "丁香路小学",
"school_type_name": "school_type_name_79898d25",
"class_type_name": "class_type_name_439df516",
"reg_time": 1584176604000,
"reg_day_count": 192,
"weixin_focus_sign": "weixin_focus_sign_0a60ac8f",
"add_wechat": "add_wechat_c9744f45",
"add_wechat_group": "add_wechat_group_c9744f45",
"learn_normal_class": "learn_normal_class_0a60ac8f",
"learn_products_type": [
"learn_products_type_775ab3b9"
],
"buy_products_type": [
"buy_products_type_775ab3b9"
],
"lesson_day_count": 1,
"learn_products_count": 1,
"buy_products_count": 1,
"history_normal_class_total": 0,
"history_low_class_total": 0,
"history_low_class_order_times": 0,
"history_normal_class_order_times": 3,
"lastweek_re_look_time_length": 0,
"lastweek_live_look_time_length": 0,
"re_look_time_length": 2,
"dt": "20200923",
"normal_refund_times": 0,
"history_normal_class_refund_total": 0,
"low_refund_times": 0,
"history_low_class_refund_total": 0,
"live_attendance": 0,
"playback_attendance": 0.0625,
"belong_province_name": "belong_province_name_473f5205",
"purchase_details": [
{
"price": "600",
"product_type": "purchase_details_product_type_775ab3b9",
"date": "2020-06-14 00:00:00",
"times": "3",
"action_type": "2"
}
]
}